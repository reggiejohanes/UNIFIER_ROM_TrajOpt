function res=UNIFIER_trimA_loop(ze_target,Va_target,dFlap)

% clc
% clear
% close all
% 
% %% Documentation
% 
% starttime = datetime; % start date & time
% timestamp = string(starttime,"yyyyMMdd_HHmmss");
% logname   = 'rundata\UNIFIER_trim_out_' + timestamp; % name of diary & data log file
% 
% diary (logname + '.txt')
% diary on % start diary
% 
% %% Set target trim conditions
% 
% %cruise
% Va_target = 55; % airspeed target [m/s] cruise=72.74m/s
% ze_target = 5;  % altitude [m] cruise=1219m
% dFlap     = deg2rad(12); % flap deflection [deg]

global target
target.Va    = Va_target;
target.ze    = ze_target;
target.dFlap = dFlap;

global penalty
penalty.zedot = 1;
penalty.udot  = 1;
penalty.wdot  = 1;
penalty.qdot  = 100;
penalty.Va    = 1;

%% Initialize z_guess

% Initial states
x0 = [Va_target/100; % u [m/s]
      0/100;         % w [m/s]
      deg2rad(0)];   % theta [deg]

% Initial control inputs
u0 = [deg2rad(0);  % Elevator deflection [deg]
      0.5;         % DEP activity factor [0-1]
      0.5];        % HTU activity factor [0-1]

init = 0;  % 0 = start from initial guess
           % 1 = use saved values from last run

if init==0
    z0 = [x0;u0];
else
    load UNIFIER_trimA_res zstar
    z0 = zstar;
end

%% Optimization

% fprintf('<strong><< OPTIMIZATION START >></strong>');
% fprintf('\n');
% fprintf('\n');

% Set bounds --------------------------------------------------------------

load UNIFIER_LOAD umin umax

% upper bounds
ub=[inf,...          % u
    inf,...          % w
    deg2rad(10),...  % theta (pitch)
    umax(3),...      % dElevator
    umax(5),...      % DEP_col
    umax(7)];        % HTU

% lower bounds
lb=[0,...            % u
    -inf,...         % w
    -deg2rad(5),...  % theta (pitch)
    umin(3),...      % dElevator
    umin(5),...      % DEP_col
    umin(7)];        % HTU

% Set options -------------------------------------------------------------

options.Display       = 'iter-detailed';
% options.Algorithm     = 'sqp';
options.Algorithm     = 'interior-point';
options.FunValCheck   = 'off';
options.ScaleProblem  = 'false';
options.FinDiffType   = 'forward';
options.TolX          = 1e-10;  % Termination tolerance on x (aka step tolerance) Default=1e-6
options.DiffMinChange = 1e-7;  % Minimum change in variables for finite-difference gradients. Default=0.
% options.DiffMaxChange = 1e-0;  % Maximum change in variables for finite-difference gradients. Default=Inf.
% options.TolFun        = 1e-8;  % Termination tolerance on the first-order optimality (aka optimalityTolerance). Default=1e-6. 
% options.TolCon        = 1e-3;  % Constraint violation tolerance
% options.MaxIter       = 100;   % Max iterations
% options.MaxFunEvals   = 1000;  % Max function evaluations
options.PlotFcns      = {@optimplotx, @optimplotfval, @optimplotfunccount, @optimplotconstrviolation, @optimplotstepsize, @optimplotfirstorderopt};
options.OutputFcn     = @outputFcn_global;

% Run optimization --------------------------------------------------------

tic
set_param('UNIFIER_dyn','SimulationMode','rapid-accelerator')
UNIFIER_dyn([],[],[],'compile')
[zstar,fval,exitflag,output] = fmincon(@(x) UNIFIER_trimA_obj(x),z0,[],[],[],[],lb,ub,[],options);
t_fmincon=toc;

% fprintf('<strong><< OPTIMIZATION COMPLETE >></strong>');
% fprintf('\n');
% fprintf('\n');
% disp('Optimization Processing Time:');
% % fprintf('Total                = %6s\n',char(duration(0,0,t_fmincon)));
% % fprintf('Avg. per Iteration   = %6s\n',char(duration(0,0,t_fmincon/(output.iterations+1))));
% fprintf('Total                = %6.4f seconds\n',t_fmincon);
% fprintf('Avg. per Iteration   = %6.4f seconds\n',t_fmincon/(output.iterations+1));
% fprintf('Avg. per Func. Eval. = %6.4f seconds\n',t_fmincon/output.funcCount);

%% Process Results

% Extract states & controls -----------------------------------------------
xstar=[0;...            % xe
       0;...            % ye
       -ze_target;...   % ze
       zstar(1)*100;... % u
       0;...            % v
       zstar(2)*100;... % w
       0;...            % phi
       zstar(3);...     % theta
       0;...            % psi
       0;...            % p
       0;...            % q
       0];              % r
ustar=[0;...            % dAil
       0;...            % dRud
       zstar(4);...     % dElev
       dFlap;...        % dFlap
       zstar(5);...     % DEP_col
       0;...            % DEP_slope
       zstar(6)];       % HTU

vastar=sqrt(xstar(4)^2+xstar(5)^2+xstar(6)^2);

% Evaluate accelerations --------------------------------------------------

% xdotstar=UNIFIER_dynamics(xstar,ustar);

out  = UNIFIER_dyn(0,[],[xstar;ustar],'outputs');
UNIFIER_dyn([],[],[],'term')
xdotstar = out(1:12);

res.xdot = xdotstar;
res.Va   = vastar;

% % Table 1 - States --------------------------------------------------------
% xstardisp=xstar;
% xstardisp(7:12)=rad2deg(xstardisp(7:12));
% xtable=array2table(xstardisp,'VariableNames',{'Value'},'RowNames',{ ...
%     '1) xe    [m]', ...
%     '2) ye    [m]', ...
%     '3) ze    [m]', ...
%     '4) u     [m/s]', ...
%     '5) v     [m/s]', ...
%     '6) w     [m/s]', ...
%     '7) phi   [deg]', ...
%     '8) theta [deg]', ...
%     '9) psi   [deg]', ...
%     '10) p    [deg/s]', ...
%     '11) q    [deg/s]', ...
%     '12) r    [deg/s]'});
% xtable0 = varfun(@(x) num2str(x, ['%' sprintf('.%df', 4)]), xtable);
% xtable0.Properties.VariableNames = xtable.Properties.VariableNames;
% xtable0.Properties.RowNames = xtable.Properties.RowNames;
% fprintf('\n');
% disp('<strong>> Table 1 - States</strong>')
% disp(xtable0)
% fprintf('\n');
% 
% % Table 2 - Controls ------------------------------------------------------
% ustardisp=ustar;
% ustardisp(1:4)=rad2deg(ustardisp(1:4));
% utable=array2table(ustardisp,'VariableNames',{'Value'},'RowNames',{ ...
%     '1) dAileron  [deg]', ...
%     '2) dRudder   [deg]', ...
%     '3) dElevator [deg]', ...
%     '4) dFlap     [deg]', ...
%     '5) DEP_col   [deg]', ...
%     '6) DEP_slope [deg]', ...
%     '7) HTU       [deg]'});
% utable0 = varfun(@(x) num2str(x, ['%' sprintf('.%df', 4)]), utable);
% utable0.Properties.VariableNames = utable.Properties.VariableNames;
% utable0.Properties.RowNames = utable.Properties.RowNames;
% disp('<strong>> Table 2 - Control Inputs</strong>')
% disp(utable0)
% fprintf('\n');
% 
% % Table 3 - Accelerations -------------------------------------------------
% xdotstardisp=xdotstar;
% xdotstardisp(7:12)=rad2deg(xdotstardisp(7:12));
% xdottable=array2table(xdotstardisp,'VariableNames',{'Value'},'RowNames',{ ...
%     '1) xedot    [m/s]', ...
%     '2) yedot    [m/s]', ...
%     '3) zedot    [m/s]', ...    
%     '4) udot     [m/s2]', ...
%     '5) vdot     [m/s2]', ...
%     '6) wdot     [m/s2]', ...
%     '7) phidot   [deg/s]', ...
%     '8) thetadot [deg/s]', ...
%     '9) psidot   [deg/s]', ...
%     '10) pdot    [deg/s2]', ...
%     '11) qdot    [deg/s2]', ...
%     '12) rdot    [deg/s2]'});
% xdottable0 = varfun(@(x) num2str(x, ['%' sprintf('.%df', 4)]), xdottable);
% xdottable0.Properties.VariableNames = xdottable.Properties.VariableNames;
% xdottable0.Properties.RowNames = xdottable.Properties.RowNames;
% disp('<strong>> Table 3 - Accelerations</strong>')
% disp(xdottable0)
% 
% % Va results --------------------------------------------------------------
% Va_actual = vastar
% Va_error  = Va_actual-Va_target
% 
% % Numerical Settings & Results --------------------------------------------
% % (for documentation purposes only)
% 
% funcinfo = dbstack;
% 
% numset = [options.TolX,...          % TolX
%           options.DiffMinChange,... % DiffMinChange
%           inf,...                   % DiffMaxChange
%           1e-6,...                  % TolFun
%           Va_target,...             % Va target (m/s)
%           ze_target,...             % Ze target (m)
%           x0(1)*100,...             % u (m/s) guess
%           x0(2)*100,...             % w (m/s) guess
%           rad2deg(x0(3)),...        % theta (deg) guess
%           rad2deg(u0(1)),...        % dElev (deg) guess
%           rad2deg(dFlap),...        % dFlap (deg) setting
%           u0(2),...                 % DEP (0-1) setting
%           u0(3),...                 % HTU (0-1) guess
%           penalty.zedot,...         % zedot objective penalty
%           penalty.udot,...          % udot objective penalty
%           penalty.wdot,...          % wdot objective penalty
%           penalty.qdot,...          % qdot objective penalty
%           penalty.Va,...            % Va objective penalty
%           lb(6)];                   % HTU lower bound
% 
% numres = [fval,...                  % fval
%           output.firstorderopt,...     % Optimality
%           0,...                        % Step length
%           output.stepsize,...          % Norm of step
%           output.iterations,...        % Iterartions
%           output.funcCount,...         % Function evaluations
%           t_fmincon,...                % Total time
%           t_fmincon/output.funcCount]; % Avg. per func. eval (s)
% 
% numall = [numset numres timestamp xdotstardisp' Va_actual Va_error funcinfo.name];
% 
% %% Save results
% 
% % save for next run
% save UNIFIER_trimA_res zstar xstar ustar vastar
% 
% % save workspace
% save (logname);
% 
% % end diary
% diary off
